#include <iostream>

class MyPoint {
private:
    double x, y;
public:
    MyPoint(int x, int y) : x(x), y(y) {}
    void get() {
        std::cout << "x = " << x << ", y = " << y << std::endl;
    }
};

template<typename T>
class MyShared {
private:
    T* ptr;
    size_t* ref_count;

public:
    MyShared(T* p = nullptr) : ptr(p), ref_count(new size_t(1)) {}
    ~MyShared() {
        if (ref_count && --(*ref_count) == 0) {
            delete ptr;
            delete ref_count;
        }
    }

    MyShared(const MyShared& other) : ptr(other.ptr), ref_count(other.ref_count) {
        if (ref_count) {
            ++(*ref_count);
        }
    }

    MyShared(MyShared&& other) noexcept : ptr(other.ptr), ref_count(other.ref_count) {
        other.ptr = nullptr;
        other.ref_count = nullptr;
    }

    MyShared& operator=(const MyShared& other) {
        if (this != &other) {
            if (ref_count && --(*ref_count) == 0) {
                delete ptr;
                delete ref_count;
            }
            ptr = other.ptr;
            ref_count = other.ref_count;
            if (ref_count) {
                ++(*ref_count);
            }
        }
        return *this;
    }

    MyShared& operator=(MyShared&& other) noexcept {
        if (this != &other) {
            if (ref_count && --(*ref_count) == 0) {
                delete ptr;
                delete ref_count;
            }
            ptr = other.ptr;
            ref_count = other.ref_count;
            other.ptr = nullptr;
            other.ref_count = nullptr;
        }
        return *this;
    }

    T* get() const { return ptr; }

    T& operator*() const { return *ptr; }

    T* operator->() const { return ptr; }
    
    size_t use_count() const {
        return *ref_count;
    }
};

template<typename T, typename... Args>
MyShared<T> Make_MyShared(Args&&... args) {
    return MyShared<T>(new T(std::forward<Args>(args)...));
}

int main() {
    {
        MyShared<int> ptr1(new int(10));
        std::cout << "ptr1 use count: " << ptr1.use_count() << std::endl;
        
        MyShared<int> ptr2 = ptr1;
        std::cout << "ptr2 use count: " << ptr2.use_count() << std::endl;
        
        MyShared<int> ptr3(ptr1);
        std::cout << "ptr3 use count: " << ptr3.use_count() << std::endl;
        
        MyShared<int> ptr4 = std::move(ptr1);
        std::cout << "ptr4 use count: " << ptr4.use_count() << std::endl;
        
        MyShared<int> ptr5(std::move(ptr4));
        std::cout << "ptr5 use count: " << ptr5.use_count() << std::endl;
    }
    {
        MyShared<MyPoint> p = Make_MyShared<MyPoint>(4, 5);
        MyPoint a = std::move(*p);
        p->get();
        a.get();
    }
    return 0;
}
